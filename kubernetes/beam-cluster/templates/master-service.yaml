apiVersion: v1
kind: Service
metadata:
    labels:
        app: {{ template "beam-simulation.master.service" . }}
        "helm.sh/hook": "post-install"
        "helm.sh/hook-weight": "5"
        {{- include "beam-simulation.release_labels" . | indent 8 }}
    name: {{ template "beam-simulation.master.service" . }}
    namespace: {{ .Values.global.namespace }}
spec:
    clusterIP: {{ .Values.service.akkaPort.master.type }}
    ports:
        - port: {{ .Values.service.akkaPort.master.port }}
          name: {{ .Values.service.akkaPort.master.name | quote }}
    selector:
        app: {{ template "beam-simulation.master.job" . }}
---
apiVersion: batch/v1
kind: Job
metadata:
    name: {{ template "beam-simulation.master.job" . }}
    namespace: {{ .Values.global.namespace }}
    labels:
        app: {{ template "beam-simulation.master.job" . }}
        "helm.sh/hook": "post-install"
        "helm.sh/hook-weight": "5"
        {{- include "beam-simulation.release_labels" . | indent 8 }}
spec:
    template:
        metadata:
            labels:
                app: {{ template "beam-simulation.master.job" . }}
                node: master
        spec:
            hostname: {{ template "beam-simulation.master.service" . }}
            restartPolicy: Never

            volumes:
                - name: {{ .Values.volume.output.name }}
                  emptyDir: {}
                - name: {{ .Values.volume.data.name }}
                  hostPath:
                      path: {{ .Values.volume.data.host }}

            imagePullSecrets:
                - name: {{ .Values.global.secret.docker }}

            containers:

                - name: {{ template "beam-simulation.master.job.container" . }}
                  image: {{ .Values.job.image }}:{{ .Values.job.imageTag }}
                  resources:
                      limits:
                          cpu: {{ sub .Values.job.resources.cpu 1 }}
                          memory: {{ printf "%dGi" ( sub .Values.job.resources.memory 1 ) | quote }}
                      requests:
                          cpu: {{ sub .Values.job.resources.cpu 2 }}
                          memory: {{ printf "%dGi" ( sub .Values.job.resources.memory 2 ) | quote }}
                  args: ["--config",  {{ printf "%s/%s" .Values.volume.data.path .Values.job.config | quote }}, "--cluster-type", "master", "--node-host", {{ include "beam-simulation.master.service" . | quote }}, "--node-port", {{ .Values.service.akkaPort.master.port | quote }}, "--seed-address", {{ printf "%s:%s" ( include "beam-simulation.master.service" . ) .Values.service.akkaPort.master.port | quote }}]
                  imagePullPolicy: Always
                  env:
                      - name: BEAM_OUTPUT
                        value: {{ .Values.volume.output.path | quote }}
                      - name: JAVA_OPTS
                        value: '{{ printf "-Xmx%dG" ( sub .Values.job.resources.memory 2 ) | quote }} {{ printf "-Xmx%dG" ( div .Values.job.resources.memory 2 ) | quote }}'
                  ports:
                      # akka remoting
                      - name: {{ .Values.service.akkaPort.master.name | quote }}
                        containerPort: {{ .Values.service.akkaPort.master.port }}
                        protocol: TCP
                  volumeMounts:
                      - name: {{ .Values.volume.output.name }}
                        mountPath: {{ .Values.volume.output.path }}
                      - name: {{ .Values.volume.data.name }}
                        mountPath: {{ .Values.volume.data.path }}